/* This is the header file for the A* search agent.
 * A* search algorithm makes use of a heuristic function as well as the total visiting cost to 
 * determine which grid to visit first.
 * In this maze game, I use the vector L1 norm (Manhattan norm) distance as the heuristic function. 
 * The total visiting cost is determined by the number of steps to the grid.
 * Since the maze generated by this maze app does not contain any loop, I simply store the
 * parent of each grid instead of the entire path for lower spatial complexity.
 * The complete path is then retrieved by tracing the parents back from the goal to the start.
 */


#include "Solver.h"
#include <vector>

#ifndef ASTARSOLVER_H
#define ASTARSOLVER_H

class AStarSolver : public Solver {
public:
    AStarSolver(const int, const int, std::vector<std::vector<bool>>&, 
                std::vector<std::vector<bool>>&, MachineBoard*);
    virtual void solve();

private:
    // stores total visiting cost to the grid, i.e. number of steps required to the grid
    std::vector<std::vector<int>> cost;

    // stores previous grid
    std::vector<std::vector<std::pair<int, int>>> parent;
    void AStar();
    void backTrace(std::vector<std::pair<int, int>>&);

    int minimizer(std::pair<int, int>&);
};

#endif // ASTARSOLVER_H