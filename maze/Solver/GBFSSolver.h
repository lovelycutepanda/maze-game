/* This is the header file for the Greedy Best-First search (GBFS) agent.
 * GBFS algorithm makes use of a heuristic function to determine which grid to visit first.
 * In this maze game, I use the vector L1 norm (Manhattan norm) distance from the goal as the 
 * heuristic function. 
 * Since the maze generated by this maze app does not contain any loop, I simply store the parent of 
 * each grid instead of the entire path for lower spatial complexity.
 * The complete path is then retrieved by tracing the parents back from the goal to the start.
 */


#include "Solver.h"
#include <vector>

#ifndef GBFSSOLVER_H
#define GBFSSOLVER_H

class GBFSSolver : public Solver {
public:
    GBFSSolver(const int, const int, std::vector<std::vector<bool>>&,
                std::vector<std::vector<bool>>&, MachineBoard*);
    virtual void solve();

private:
    // stores previous grid
    std::vector<std::vector<std::pair<int, int>>> parent;
    void GBFS();
    void backTrace(std::vector<std::pair<int, int>>&);

    int heuristic(std::pair<int, int>&);
};

#endif // GBFSSOLVER_H